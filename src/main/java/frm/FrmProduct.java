package frm;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import com.mongodb.MongoClientException;

import dao.Product_DAO;

import entities.Product;
import i_dao.I_FrmProduct;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author LENOVO
 */
public class FrmProduct extends javax.swing.JFrame implements I_FrmProduct, ActionListener, MouseListener {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
     * Creates new form FrmCustomers
     */
	Product_DAO product_DAO=new Product_DAO();
    public FrmProduct() {
    	setTitle("Quản lí thông tin sản phẩm gia đình.");
        initComponents();
        addEvents();
        renderTableProduct();
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        pnlTitle = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        pnlControl = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblQuantity = new javax.swing.JLabel();
        lblQuantity1 = new javax.swing.JLabel();
        spnQuantity = new javax.swing.JSpinner();
        txtPrice = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        txtStatus = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnFindByName = new javax.swing.JButton();
        txtFind = new javax.swing.JTextField();
        scrollPane = new javax.swing.JScrollPane();
        //dtm
       

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlTitle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitle.setText("Quản lí thông tin sản phẩm gia đình");

        javax.swing.GroupLayout pnlTitleLayout = new javax.swing.GroupLayout(pnlTitle);
        pnlTitle.setLayout(pnlTitleLayout);
        pnlTitleLayout.setHorizontalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTitleLayout.createSequentialGroup()
                .addGap(208, 208, 208)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTitleLayout.setVerticalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTitleLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lblTitle)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pnlControl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        lblName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblName.setText("Name:");

        txtName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));


        lblQuantity.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblQuantity.setText("Quantity in Shop:");

        lblQuantity1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblQuantity1.setText("Price:");

        spnQuantity.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        txtPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));


        lblStatus.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblStatus.setText("Status:");

        txtStatus.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));


        btnAdd.setText("Add");
        btnAdd.setActionCommand("");
        btnAdd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));


        btnDelete.setText("Delete");
        btnDelete.setActionCommand("");
        btnDelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));


        btnUpdate.setText("Update");
        btnUpdate.setActionCommand("");
        btnUpdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));


        btnReset.setText("Reset");
        btnReset.setActionCommand("");
        btnReset.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));


        btnFindByName.setText("Find By Name");
        btnFindByName.setActionCommand("");
        btnFindByName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));


        txtFind.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));


        javax.swing.GroupLayout pnlControlLayout = new javax.swing.GroupLayout(pnlControl);
        pnlControl.setLayout(pnlControlLayout);
        pnlControlLayout.setHorizontalGroup(
            pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlControlLayout.createSequentialGroup()
                        .addComponent(lblName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtName))
                    .addGroup(pnlControlLayout.createSequentialGroup()
                        .addComponent(lblQuantity1)
                        .addGap(20, 20, 20)
                        .addComponent(txtPrice))
                    .addGroup(pnlControlLayout.createSequentialGroup()
                        .addComponent(lblQuantity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                    .addGroup(pnlControlLayout.createSequentialGroup()
                        .addComponent(lblStatus)
                        .addGap(12, 12, 12)
                        .addComponent(txtStatus))
                    .addGroup(pnlControlLayout.createSequentialGroup()
                        .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlControlLayout.createSequentialGroup()
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlControlLayout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnFindByName, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txtFind))
                .addContainerGap())
        );
        pnlControlLayout.setVerticalGroup(
            pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQuantity)
                    .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQuantity1)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnFindByName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        scrollPane.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        /*
         * String[] headersClothing= "STT;Mã;Tên;Số lượng;Giá".split(";");
        tableModelClothing= new DefaultTableModel(headersClothing, 0);
        scrollPaneClothing=new JScrollPane();     
        scrollPaneClothing.setViewportView(tableClothing=new JTable(tableModelClothing));
        tableClothing.setRowHeight(25);
         */
        String[] headers="Index;Pro Id;Name;Price;Quantity".split(";");
        tableModel=new DefaultTableModel(headers, 0);
        scrollPane=new JScrollPane();   
        table=new JTable(tableModel);
        scrollPane.setViewportView(table);
        
        scrollPane.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollPane))
                    .addComponent(pnlTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
   
    }// </editor-fold>                        
    //UX
    private void addEvents() {
    	btnAdd.addActionListener(this);
    	btnDelete.addActionListener(this);
    	btnFindByName.addActionListener(this);
    	btnReset.addActionListener(this);
    	btnUpdate.addActionListener(this);
    	table.addMouseListener(this);
    }
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            //java.util.logging.Logger.getLogger(FrmProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            //java.util.logging.Logger.getLogger(FrmProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            //java.util.logging.Logger.getLogger(FrmProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            //java.util.logging.Logger.getLogger(FrmProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmProduct().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFindByName;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JTable table;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblQuantity1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlControl;
    private javax.swing.JPanel pnlTitle;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JSpinner spnQuantity;
    private javax.swing.JTextField txtFind;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtStatus;
    private DefaultTableModel tableModel;
    // End of variables declaration        
    private void renderFrm() {
    	setVisible(false);
		new FrmProduct().setVisible(true);
    }
	@Override
	public void addProduct()throws NumberFormatException {
		// TODO Auto-generated method stub
		String productName=txtName.getText();
		String priceString=txtPrice.getText();
		int quantityInShop=(int) spnQuantity.getValue();
		double price=Double.parseDouble(priceString);
		Product product=new Product(productName, price, quantityInShop);
		if(product_DAO.addProduct(product)) {
			renderFrm();
			//renderTableProduct();

		}else
		{
			JOptionPane.showMessageDialog(null, "Xảy ra lỗi khi thêm.", "Lỗi", JOptionPane.ERROR_MESSAGE);
		}
	}

	@Override
	public void renderTableProduct() {
		// TODO Auto-generated method stub
		tableModel.setRowCount(0);
		if(product_DAO.getListProducts().size()==0)
		{
			JOptionPane.showMessageDialog(null, "Không có dữ liệu.", "Lỗi", JOptionPane.ERROR_MESSAGE);
		}else
		{
			System.out.println("Đã render danh sách Car.");
			int index=1;
			for(Product product: product_DAO.getListProducts())
			{
				System.out.println(product);
				String row[]= {Integer.toString(index++),Integer.toString(product.getProductId()),
						product.getProductName(),Double.toString(product.getPrice()),
						Integer.toString(product.getQuantityInShop())
						};
				tableModel.addRow(row);
			}
		}
	}

	@Override
	public void updateProduct() throws MongoClientException{
		// TODO Auto-generated method stub
		int row = table.getSelectedRow();
		if(row!=-1)
		{
			try
			{
				String productName=txtName.getText();
				String priceString=txtPrice.getText();
				int quantityInShop=(int) spnQuantity.getValue();
				double price=Double.parseDouble(priceString);
				int productId=Integer.parseInt(table.getModel().getValueAt(row, 1).toString());
				Product product=new Product(productName, price, quantityInShop);
				product.setProductId(productId);
				product_DAO.updateProduct(product);
				JOptionPane.showMessageDialog(null, "Cập nhật thành công.", "Thông báo.", JOptionPane.INFORMATION_MESSAGE);
				renderFrm();
			}catch(NumberFormatException e)
			{
				e.printStackTrace();
				System.out.println(e);
				JOptionPane.showMessageDialog(null, e, "Lỗi.", JOptionPane.ERROR_MESSAGE);
			}
		}else
		{
			JOptionPane.showMessageDialog(null, "Vui lòng chọn dòng để cập nhật.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
		}
	}
	private boolean validatationDouble(String str) {
		try {
			Double.parseDouble(str);
			return true;
		}catch(NumberFormatException e) {
			e.printStackTrace();
			System.out.println(e);
			return false;
		}
	}

	@Override
	public boolean validatationInputProduct() {
		String productName=txtName.getText();
		String priceString=txtPrice.getText();
		int quantityInShop=(int) spnQuantity.getValue();
		if(productName.trim().equals("")||priceString.trim().equals("")) {
			JOptionPane.showMessageDialog(null, "Vui lòng nhập hết.", "Thông báo.", JOptionPane.WARNING_MESSAGE);
			return false;
		}
		if(quantityInShop<=0) {
			JOptionPane.showMessageDialog(null, "Vui lòng nhap so luong la lon hon 0.", "Thông báo.", JOptionPane.WARNING_MESSAGE);
			return false;
		}
		if(!validatationDouble(priceString)){
			JOptionPane.showMessageDialog(null, "Vui lòng nhap gia la so thuc.", "Thông báo.", JOptionPane.WARNING_MESSAGE);
			return false;
		}
		if(Double.parseDouble(priceString)<=0) {
			JOptionPane.showMessageDialog(null, "Vui lòng nhap gia lon hon 0.", "Thông báo.", JOptionPane.WARNING_MESSAGE);
			return false;
		}
		
		return true;
	}

	@Override
	public void deleteProduct() {
		// TODO Auto-generated method stub
		int row=table.getSelectedRow();
		if (row != -1) {
			int productId=Integer.parseInt(table.getModel().getValueAt(row, 1).toString());
			int kTra = JOptionPane.showConfirmDialog(this, "Chắc chắn xoá không", "Chú ý", JOptionPane.YES_NO_OPTION);
			if (kTra == JOptionPane.YES_OPTION) {
				if(product_DAO.deleteProduct(productId))
				{
					JOptionPane.showMessageDialog(null, "Xóa thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
					renderFrm();
				}
				else
				{
					JOptionPane.showMessageDialog(null, "Xảy ra lỗi khi xóa.", "Lỗi", JOptionPane.ERROR_MESSAGE);
				}
			}
		}else
		{
			JOptionPane.showMessageDialog(null, "Vui lòng chọn dòng bảng để xóa.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
		}
	}

	@Override
	public void sortTableByName() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseClicked(MouseEvent e) throws NumberFormatException{
		// TODO Auto-generated method stub
		int rowProduct=table.getSelectedRow();
		txtName.setText(table.getValueAt(rowProduct, 2).toString());
		txtPrice.setText(table.getValueAt(rowProduct, 3).toString());
		spnQuantity.setValue(Integer.parseInt(table.getValueAt(rowProduct, 4).toString()));
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		Object o=e.getSource();
		if(o.equals(btnAdd)) {
			if(validatationInputProduct())
				addProduct();
		}
		if(o.equals(btnDelete)) {
			deleteProduct();
		}
		if(o.equals(btnUpdate)){
			if(validatationInputProduct())
				updateProduct();
		}
		if(o==btnReset) {
			resetFrm();
		}
		if(o==btnFindByName) {
			renderTableProduct_FindByName();
		}
	}

	@Override
	public void renderTableProduct_FindByName() {
		// TODO Auto-generated method stub
		String nameFind=txtFind.getText();
		if(nameFind.trim().equals("")) {
			JOptionPane.showMessageDialog(null, "Không có dữ liệu.", "Lỗi", JOptionPane.ERROR_MESSAGE);
		}else
		{
			tableModel.setRowCount(0);
			if(product_DAO.getListProducts().size()==0)
			{
				JOptionPane.showMessageDialog(null, "Không có dữ liệu.", "Lỗi", JOptionPane.ERROR_MESSAGE);
			}else
			{
				System.out.println("Đã render danh sách.");
				int index=1;
				for(Product product: product_DAO.getListProducts())
				{
					if(product.getProductName().equalsIgnoreCase(nameFind)) {
						System.out.println(product);
						String row[]= {Integer.toString(index++),Integer.toString(product.getProductId()),
								product.getProductName(),Double.toString(product.getPrice()),
								Integer.toString(product.getQuantityInShop())
								};
						tableModel.addRow(row);
					}		
				}
			}
		}		
	}

	@Override
	public void resetFrm() {
		// TODO Auto-generated method stub
		txtName.setText("");
		txtFind.setText("");
		txtPrice.setText("");
		renderTableProduct();
	}

	
}
